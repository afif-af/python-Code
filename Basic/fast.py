{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/afifaf20/python-practice?scriptVersionId=198781785\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# type casting","metadata":{"execution":{"iopub.status.busy":"2024-08-17T07:08:38.268335Z","iopub.execute_input":"2024-08-17T07:08:38.269041Z","iopub.status.idle":"2024-08-17T07:08:38.274399Z","shell.execute_reply.started":"2024-08-17T07:08:38.269005Z","shell.execute_reply":"2024-08-17T07:08:38.273341Z"}}},{"cell_type":"code","source":"Num=10\nsecondNum=input(\"Enter a number :\")\nprint(Num +int( secondNum))\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-28T04:02:58.887149Z","iopub.execute_input":"2024-09-28T04:02:58.88798Z","iopub.status.idle":"2024-09-28T04:03:12.928453Z","shell.execute_reply.started":"2024-09-28T04:02:58.887941Z","shell.execute_reply":"2024-09-28T04:03:12.92722Z"},"trusted":true},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdin","text":"Enter a number : 20\n"},{"name":"stdout","text":"30\n","output_type":"stream"}]},{"cell_type":"code","source":"name=\"Afif Af\"\nadress=\" vill: x,post:y dist:z\"\nprint(name, adress)","metadata":{"execution":{"iopub.status.busy":"2024-09-28T04:03:56.589237Z","iopub.execute_input":"2024-09-28T04:03:56.589653Z","iopub.status.idle":"2024-09-28T04:03:56.595493Z","shell.execute_reply.started":"2024-09-28T04:03:56.589622Z","shell.execute_reply":"2024-09-28T04:03:56.594328Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Afif Af  vill: x,post:y dist:z\n","output_type":"stream"}]},{"cell_type":"code","source":"type(name)","metadata":{"execution":{"iopub.status.busy":"2024-09-28T04:03:57.452501Z","iopub.execute_input":"2024-09-28T04:03:57.452893Z","iopub.status.idle":"2024-09-28T04:03:57.460771Z","shell.execute_reply.started":"2024-09-28T04:03:57.452864Z","shell.execute_reply":"2024-09-28T04:03:57.459649Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"str"},"metadata":{}}]},{"cell_type":"code","source":"age=input(\"enter age:\")\nif int(age)>=30:\n    print(\"senior\")\nelse:\n  print(\"junior\")","metadata":{"execution":{"iopub.status.busy":"2024-09-28T04:05:07.257528Z","iopub.execute_input":"2024-09-28T04:05:07.257926Z","iopub.status.idle":"2024-09-28T04:05:09.481062Z","shell.execute_reply.started":"2024-09-28T04:05:07.257898Z","shell.execute_reply":"2024-09-28T04:05:09.479934Z"},"trusted":true},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdin","text":"enter age: 22\n"},{"name":"stdout","text":"junior\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Loop","metadata":{}},{"cell_type":"code","source":"#for age in range(0,20,2):\n # print(age)\nsum=0\nfor i in range(1,101,2):\n\n        sum=sum+i;\nprint(sum)","metadata":{"execution":{"iopub.status.busy":"2024-09-28T04:05:14.524577Z","iopub.execute_input":"2024-09-28T04:05:14.525489Z","iopub.status.idle":"2024-09-28T04:05:14.531261Z","shell.execute_reply.started":"2024-09-28T04:05:14.525456Z","shell.execute_reply":"2024-09-28T04:05:14.530139Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"2500\n","output_type":"stream"}]},{"cell_type":"code","source":"# while Loop\ni=0\nsum2=0\nwhile i<101:\n    sum2 =sum2+i\n    i+=2\nprint(sum2)\n    ","metadata":{"execution":{"iopub.status.busy":"2024-09-28T04:07:21.127407Z","iopub.execute_input":"2024-09-28T04:07:21.128334Z","iopub.status.idle":"2024-09-28T04:07:21.134045Z","shell.execute_reply.started":"2024-09-28T04:07:21.1283Z","shell.execute_reply":"2024-09-28T04:07:21.132999Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"2550\n","output_type":"stream"}]},{"cell_type":"code","source":"fruits=[\"banana\",\"mango\",\"jack\"]\nfor j in  fruits:\n    print(j)\n    \nprint(fruits[1])","metadata":{"execution":{"iopub.status.busy":"2024-09-28T04:07:40.773857Z","iopub.execute_input":"2024-09-28T04:07:40.774238Z","iopub.status.idle":"2024-09-28T04:07:40.78053Z","shell.execute_reply.started":"2024-09-28T04:07:40.774206Z","shell.execute_reply":"2024-09-28T04:07:40.779423Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"banana\nmango\njack\nmango\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# method\n","metadata":{}},{"cell_type":"code","source":"def addTwoNum(a,b):\n    return a+b\ndef subTwoNum(a,b):\n    return a-b\n\nresult=addTwoNum(33,552)    \n\nprint(result)","metadata":{"execution":{"iopub.status.busy":"2024-09-28T04:07:48.836947Z","iopub.execute_input":"2024-09-28T04:07:48.837389Z","iopub.status.idle":"2024-09-28T04:07:48.844403Z","shell.execute_reply.started":"2024-09-28T04:07:48.837335Z","shell.execute_reply":"2024-09-28T04:07:48.843254Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"585\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Array List","metadata":{}},{"cell_type":"code","source":"shopping_list=[\"daal\",\"rice\",\"beef\"]\n\nint_list=[0,1,2,3,4,5,6,7,8]\nprint(int_list)\nprint(int_list[:4])","metadata":{"execution":{"iopub.status.busy":"2024-09-29T12:17:33.099649Z","iopub.execute_input":"2024-09-29T12:17:33.100206Z","iopub.status.idle":"2024-09-29T12:17:33.108935Z","shell.execute_reply.started":"2024-09-29T12:17:33.100158Z","shell.execute_reply":"2024-09-29T12:17:33.107672Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"[0, 1, 2, 3, 4, 5, 6, 7, 8]\n[0, 1, 2, 3]\n","output_type":"stream"}]},{"cell_type":"code","source":"\nprint(max(int_list))\nmax=int_list[0]\nfor i in int_list :\n    if i>max:\n        max=i\nprint(max)","metadata":{"execution":{"iopub.status.busy":"2024-09-29T12:17:45.037081Z","iopub.execute_input":"2024-09-29T12:17:45.037516Z","iopub.status.idle":"2024-09-29T12:17:45.047074Z","shell.execute_reply.started":"2024-09-29T12:17:45.037484Z","shell.execute_reply":"2024-09-29T12:17:45.045851Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"8\n8\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Hashmap","metadata":{}},{"cell_type":"code","source":"list_n =[1,2,3,4,5,6,7,8,9,10]\n\nperson = {\n    \n    \"name\": \"afif\",\n    \"age\":18,\n    \"grades\":{\"bag\": 33.0, \"eng\":88}\n    \"10\":[10,100,1000]\n   }","metadata":{"execution":{"iopub.status.busy":"2024-09-28T05:06:37.399388Z","iopub.execute_input":"2024-09-28T05:06:37.399833Z","iopub.status.idle":"2024-09-28T05:06:37.406993Z","shell.execute_reply.started":"2024-09-28T05:06:37.399799Z","shell.execute_reply":"2024-09-28T05:06:37.405486Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"print(person[\"grades\"][\"eng\"])","metadata":{"execution":{"iopub.status.busy":"2024-09-28T05:06:56.488435Z","iopub.execute_input":"2024-09-28T05:06:56.489608Z","iopub.status.idle":"2024-09-28T05:06:56.494797Z","shell.execute_reply.started":"2024-09-28T05:06:56.489545Z","shell.execute_reply":"2024-09-28T05:06:56.493663Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"88\n","output_type":"stream"}]},{"cell_type":"code","source":"from collections import defaultdict\nlist_n =[1,2,3,4,5,6,7,8,9,10]\n\ndic=defaultdict(list)\n\nfor num in list_n:\n    dic[num%2].append(num)\nprint(dic)","metadata":{"execution":{"iopub.status.busy":"2024-09-28T05:11:34.097059Z","iopub.execute_input":"2024-09-28T05:11:34.097493Z","iopub.status.idle":"2024-09-28T05:11:34.10488Z","shell.execute_reply.started":"2024-09-28T05:11:34.097462Z","shell.execute_reply":"2024-09-28T05:11:34.103785Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"defaultdict(<class 'list'>, {1: [1, 3, 5, 7, 9], 0: [2, 4, 6, 8, 10]})\n","output_type":"stream"}]},{"cell_type":"code","source":"for key,val in person.items():\n    print(key,val)","metadata":{"execution":{"iopub.status.busy":"2024-09-28T05:13:11.422714Z","iopub.execute_input":"2024-09-28T05:13:11.423139Z","iopub.status.idle":"2024-09-28T05:13:11.429682Z","shell.execute_reply.started":"2024-09-28T05:13:11.423106Z","shell.execute_reply":"2024-09-28T05:13:11.428424Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"name afif\nage 18\ngrades {'bag': 33.0, 'eng': 88}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# tree\n","metadata":{}},{"cell_type":"code","source":"class TreeNode:\n    def __init__(self,val):\n        self.val=val\n        self.left, self.right=None,None\n        \ndef traverse(root):\n    if root:\n        \n        traverse(root.left)\n        traverse(root.right)\n        print(root.val)\n        \ndef main():\n    root = TreeNode(13)\n    \n    root.left=TreeNode(10)\n    root.right=TreeNode(15)\n    \n    root.left.left=TreeNode(5)\n    root.left.right=TreeNode(100)\n    \n    root.right.left=TreeNode(3)\n    root.right.right=TreeNode(2)\n    traverse(root)\nmain()","metadata":{"execution":{"iopub.status.busy":"2024-09-28T08:54:25.346864Z","iopub.execute_input":"2024-09-28T08:54:25.34723Z","iopub.status.idle":"2024-09-28T08:54:25.355591Z","shell.execute_reply.started":"2024-09-28T08:54:25.347202Z","shell.execute_reply":"2024-09-28T08:54:25.354491Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"5\n100\n10\n3\n2\n15\n13\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# stack\n","metadata":{}},{"cell_type":"code","source":"class Stack:\n    def __init__(self):\n        self.stack = []  # Changed from self.item to self.stack\n        \n    def push(self, item):\n        self.stack.append(item)  # Fixed reference to self.stack\n        \n    def pop(self):\n        return self.stack.pop()\n    \n    def size(self):\n        return len(self.stack)\n    \n    def is_empty(self):\n        return len(self.stack) == 0\n    \n    def peek(self):\n        return self.stack[-1] if not self.is_empty() else None  # Handling empty stack case\n\n# Testing the corrected class\nstack = Stack()\nstack.push(10)\nprint(\"Size of the stack:\", stack.size())\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-29T12:19:40.956215Z","iopub.execute_input":"2024-09-29T12:19:40.957276Z","iopub.status.idle":"2024-09-29T12:19:40.966441Z","shell.execute_reply.started":"2024-09-29T12:19:40.957238Z","shell.execute_reply":"2024-09-29T12:19:40.965198Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Size of the stack: 1\n","output_type":"stream"}]},{"cell_type":"code","source":"class Stack:\n    def __init__(self):\n        self.stack = []  \n\n    def push(self, item):\n        self.stack.append(item)\n        \n    def pop(self):\n        if self.is_empty():\n            print(\"print empty\")\n        else:\n            return self.stack.pop()  \n\n    def size(self):\n        return len(self.stack)  \n\n    def is_empty(self): \n        return len(self.stack) == 0  \n\n    def peek(self):\n        return self.stack[-1] \n\n\n\nstack = Stack()\nstack.push(10)\nstack.push(20)\nstack.push(30)\nprint(\"Size of the stack:\", stack.size())  \n","metadata":{"execution":{"iopub.status.busy":"2024-09-29T12:19:45.371059Z","iopub.execute_input":"2024-09-29T12:19:45.371519Z","iopub.status.idle":"2024-09-29T12:19:45.382081Z","shell.execute_reply.started":"2024-09-29T12:19:45.371484Z","shell.execute_reply":"2024-09-29T12:19:45.380937Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Size of the stack: 3\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\" pop\",stack.pop())","metadata":{"execution":{"iopub.status.busy":"2024-09-28T09:41:27.796081Z","iopub.execute_input":"2024-09-28T09:41:27.796495Z","iopub.status.idle":"2024-09-28T09:41:27.801941Z","shell.execute_reply.started":"2024-09-28T09:41:27.796461Z","shell.execute_reply":"2024-09-28T09:41:27.800752Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":" pop 30\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\" pop\",stack.pop())","metadata":{"execution":{"iopub.status.busy":"2024-09-28T09:41:28.69622Z","iopub.execute_input":"2024-09-28T09:41:28.69716Z","iopub.status.idle":"2024-09-28T09:41:28.702142Z","shell.execute_reply.started":"2024-09-28T09:41:28.697101Z","shell.execute_reply":"2024-09-28T09:41:28.701157Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":" pop 20\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\" pop\",stack.pop())","metadata":{"execution":{"iopub.status.busy":"2024-09-28T09:41:29.648132Z","iopub.execute_input":"2024-09-28T09:41:29.649138Z","iopub.status.idle":"2024-09-28T09:41:29.654535Z","shell.execute_reply.started":"2024-09-28T09:41:29.649076Z","shell.execute_reply":"2024-09-28T09:41:29.653218Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":" pop 10\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\" pop\",stack.pop())","metadata":{"execution":{"iopub.status.busy":"2024-09-28T09:41:30.463272Z","iopub.execute_input":"2024-09-28T09:41:30.463653Z","iopub.status.idle":"2024-09-28T09:41:30.469432Z","shell.execute_reply.started":"2024-09-28T09:41:30.463625Z","shell.execute_reply":"2024-09-28T09:41:30.468083Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"print empty\n pop None\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Iteration","metadata":{}},{"cell_type":"code","source":"list=[3,54]\ni =iter(list)\nprint(next(i))\nprint(next(i))\n","metadata":{"execution":{"iopub.status.busy":"2024-09-28T10:21:18.768586Z","iopub.execute_input":"2024-09-28T10:21:18.768946Z","iopub.status.idle":"2024-09-28T10:21:18.77501Z","shell.execute_reply.started":"2024-09-28T10:21:18.768917Z","shell.execute_reply":"2024-09-28T10:21:18.773829Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"3\n54\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# generators","metadata":{}},{"cell_type":"code","source":"def num_gen(n):\n    for i in range(1,n):\n         yield i\n            \nnumbers =num_gen(11)\nfor i in numbers:\n    print(i)\nfor i in numbers:\n    print(i)","metadata":{"execution":{"iopub.status.busy":"2024-09-28T10:24:13.847188Z","iopub.execute_input":"2024-09-28T10:24:13.84758Z","iopub.status.idle":"2024-09-28T10:24:13.853928Z","shell.execute_reply.started":"2024-09-28T10:24:13.84755Z","shell.execute_reply":"2024-09-28T10:24:13.852854Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# linkedlist","metadata":{}},{"cell_type":"code","source":"class Node:\n    def __init__(self,data):\n        self.data =data\n        self.next = None\nclass LinkedList:\n    def __init__(self):\n        self.head =None\n    def insert_at_beginning(self,data):\n        new_node =Node(data)\n        new_node.next =self.head\n        self.head=new_node\n    def display(self):\n        current =self.head\n        while current:\n            print(current.data,end=\"->\")\n            current=current.next\n        print(\"None\")\n\nmy_li","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}